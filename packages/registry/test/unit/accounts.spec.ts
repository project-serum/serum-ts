import { accounts } from '../../src';
import BN from 'bn.js';
import { PublicKey } from '@solana/web3.js';

// TODO: remove these tests once we have end-to-end tests with the Rust
//       program. Will make changes much easier/more flexible.
describe('Accounts', () => {
  it('Serializes and deserializes a Rust Registrar', async () => {
    const pk = new PublicKey('HsQhg1k93vEA326SXxnGj1sZrdupG7rj5T6g5cMgk1ed');
    const registrar = {
      initialized: true,
      authority: pk,
      nonce: 0,
      rewardActivationThreshold: new BN(100),
      withdrawalTimelock: new BN(0),
      deactivationTimelock: new BN(0),
      vault: pk,
      megaVault: pk,
      pool: pk,
      megaPool: pk,
      poolProgramId: pk,
    };
    const data = accounts.registrar.encode(registrar);
    const buf = Buffer.from([
      1,
      250,
      164,
      212,
      146,
      235,
      177,
      143,
      158,
      100,
      199,
      142,
      62,
      68,
      41,
      200,
      125,
      27,
      90,
      42,
      14,
      236,
      238,
      81,
      32,
      41,
      163,
      158,
      120,
      231,
      70,
      240,
      238,
      0,
      100,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      250,
      164,
      212,
      146,
      235,
      177,
      143,
      158,
      100,
      199,
      142,
      62,
      68,
      41,
      200,
      125,
      27,
      90,
      42,
      14,
      236,
      238,
      81,
      32,
      41,
      163,
      158,
      120,
      231,
      70,
      240,
      238,
      250,
      164,
      212,
      146,
      235,
      177,
      143,
      158,
      100,
      199,
      142,
      62,
      68,
      41,
      200,
      125,
      27,
      90,
      42,
      14,
      236,
      238,
      81,
      32,
      41,
      163,
      158,
      120,
      231,
      70,
      240,
      238,
      250,
      164,
      212,
      146,
      235,
      177,
      143,
      158,
      100,
      199,
      142,
      62,
      68,
      41,
      200,
      125,
      27,
      90,
      42,
      14,
      236,
      238,
      81,
      32,
      41,
      163,
      158,
      120,
      231,
      70,
      240,
      238,
      250,
      164,
      212,
      146,
      235,
      177,
      143,
      158,
      100,
      199,
      142,
      62,
      68,
      41,
      200,
      125,
      27,
      90,
      42,
      14,
      236,
      238,
      81,
      32,
      41,
      163,
      158,
      120,
      231,
      70,
      240,
      238,
      250,
      164,
      212,
      146,
      235,
      177,
      143,
      158,
      100,
      199,
      142,
      62,
      68,
      41,
      200,
      125,
      27,
      90,
      42,
      14,
      236,
      238,
      81,
      32,
      41,
      163,
      158,
      120,
      231,
      70,
      240,
      238,
    ]);
    const registrar2 = accounts.registrar.decode(buf);

    expect(data).toStrictEqual(buf);
    expect(JSON.stringify(registrar)).toEqual(JSON.stringify(registrar2));
  });

  it('Serializes and deserializes a Rust Entity', async () => {
    const pk = new PublicKey('HsQhg1k93vEA326SXxnGj1sZrdupG7rj5T6g5cMgk1ed');
    const entity = {
      initialized: true,
      registrar: pk,
      leader: pk,
      balances: {
        sptAmount: new BN(1),
        sptMegaAmount: new BN(2),
        stakeIntent: new BN(3),
        megaStakeIntent: new BN(4),
      },
      generation: new BN(5),
      state: {
        active: {},
      },
    };
    const data = accounts.entity.encode(entity);
    const buf = Buffer.from([
      1,
      250,
      164,
      212,
      146,
      235,
      177,
      143,
      158,
      100,
      199,
      142,
      62,
      68,
      41,
      200,
      125,
      27,
      90,
      42,
      14,
      236,
      238,
      81,
      32,
      41,
      163,
      158,
      120,
      231,
      70,
      240,
      238,
      250,
      164,
      212,
      146,
      235,
      177,
      143,
      158,
      100,
      199,
      142,
      62,
      68,
      41,
      200,
      125,
      27,
      90,
      42,
      14,
      236,
      238,
      81,
      32,
      41,
      163,
      158,
      120,
      231,
      70,
      240,
      238,
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      2,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      3,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      4,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      5,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      2,
    ]);
    const entity2 = accounts.entity.decode(buf);

    expect(data).toStrictEqual(buf);
    expect(JSON.stringify(entity)).toEqual(JSON.stringify(entity2));
  });

  it('Serializes and deserializes a Rust Entity with struct enum', async () => {
    const pk = new PublicKey('HsQhg1k93vEA326SXxnGj1sZrdupG7rj5T6g5cMgk1ed');
    const entity = {
      initialized: true,
      registrar: pk,
      leader: pk,
      balances: {
        sptAmount: new BN(1),
        sptMegaAmount: new BN(2),
        stakeIntent: new BN(3),
        megaStakeIntent: new BN(4),
      },
      generation: new BN(5),
      state: {
        pendingDeactivation: {
          deactivationStartTs: new BN(1),
          timelock: new BN(2),
        },
      },
    };
    const data = accounts.entity.encode(entity);
    const buf = Buffer.from([
      1,
      250,
      164,
      212,
      146,
      235,
      177,
      143,
      158,
      100,
      199,
      142,
      62,
      68,
      41,
      200,
      125,
      27,
      90,
      42,
      14,
      236,
      238,
      81,
      32,
      41,
      163,
      158,
      120,
      231,
      70,
      240,
      238,
      250,
      164,
      212,
      146,
      235,
      177,
      143,
      158,
      100,
      199,
      142,
      62,
      68,
      41,
      200,
      125,
      27,
      90,
      42,
      14,
      236,
      238,
      81,
      32,
      41,
      163,
      158,
      120,
      231,
      70,
      240,
      238,
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      2,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      3,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      4,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      5,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1,
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      2,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
    ]);
    const entity2 = accounts.entity.decode(buf);

    expect(data).toStrictEqual(buf);
    expect(JSON.stringify(entity)).toEqual(JSON.stringify(entity2));
  });

  it('Serializes and deserializes a Rust PendingWithdrawal', async () => {
    const pk = new PublicKey('HsQhg1k93vEA326SXxnGj1sZrdupG7rj5T6g5cMgk1ed');

    const pw = {
      initialized: true,
      burned: false,
      member: pk,
      startTs: new BN(100),
      endTs: new BN(200),
      sptAmount: new BN(1),
      pool: pk,
      payment: {
        assetAmount: new BN(2),
        megaAssetAmount: new BN(3),
      },
    };

    const data = accounts.pendingWithdrawal.encode(pw);
    const buf = Buffer.from([
      1,
      0,
      250,
      164,
      212,
      146,
      235,
      177,
      143,
      158,
      100,
      199,
      142,
      62,
      68,
      41,
      200,
      125,
      27,
      90,
      42,
      14,
      236,
      238,
      81,
      32,
      41,
      163,
      158,
      120,
      231,
      70,
      240,
      238,
      100,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      200,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      250,
      164,
      212,
      146,
      235,
      177,
      143,
      158,
      100,
      199,
      142,
      62,
      68,
      41,
      200,
      125,
      27,
      90,
      42,
      14,
      236,
      238,
      81,
      32,
      41,
      163,
      158,
      120,
      231,
      70,
      240,
      238,
      2,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      3,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
    ]);
    const pw2 = accounts.pendingWithdrawal.decode(buf);

    expect(data).toStrictEqual(buf);
    expect(JSON.stringify(pw)).toEqual(JSON.stringify(pw2));
  });
});
